###服务端口号
server:
  servlet:
    encoding:
      force: true
      charset: utf-8
      enabled: true
  port: ${port:5000}
#  tomcat:
#    uri-encoding: UTF-8

###服务名称
spring:
  application:
    name: ${name:eureka-gateway}
  redis:
    host: ${redisHost:192.168.1.3}
    port: ${redisPort:6379}
    password: ${redisPassword:wjp930514.}
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true #是否与服务发现组件进行组合，
          #通过serviceId转发到具体的服务实例。默认为false，若为true便开启基于服务发现的路由规则
          lower-case-service-id: true #当注册中心为Eureka时,设置为true标识开启用小写的serviceId进行基于服务路由转发
      routes:
        - id: clientb_route #在所有路由定义中需要唯一，不能重复
          uri: lb://eureka-client-test # 目标服务地址 为固定写法，表示开启负载均衡； ** 即服务在 eureka 中注册的名字
          order: 2
          predicates:
            - Path=/clientb/**
          filters:
            - StripPrefix=1 #前缀， 在当前路径匹配中表示去掉第一个前缀 /notity
eureka:
  instance:
     hostname:  ${hostname:192.168.1.3} #注册中心地址
     #port: 8080
     lease-renewal-interval-in-seconds: 10 # 每隔10s发送一次心跳
     lease-expiration-duration-in-seconds: 30 # 告知服务端30秒还未收到心跳的话，就将该服务移除列表
  client: #客户端调用地址
     serviceUrl:
       defaultZone: ${defaultZone:http://${eureka.instance.hostname}:4000/eureka/}
     register-with-eureka: true #是否将自己注册到Eureka服务中,因为该应用本身就是注册中心，不需要再注册自己（集群的时候为true）
     fetch-registry: true #是否从Eureka中获取注册信息,因为自己为注册中心,不会在该应用中的检索服务信息
  server:
    my-url: null
    #enable-self-preservation: false # 关闭自我保护机制
    #eviction-interval-timer-in-ms: 10000 # 每隔10s扫描服务列表，移除失效服务